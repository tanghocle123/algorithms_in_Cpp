1_12

	Compute the average distance from a node to the root in a worst-case tree of 2^n nodes built by the weighted quick-union algorithms

	So the plan is, after compute 6 pairs of union-find, we will compute the average distance
	Not simutaneously though

	I will add the code also after coding up the new algorithm for this exercise

---------------------------------------------------------------------------------------------------
#include <iostream>
// 0 1 2 3 4 5 6 7 0 2 4 6
static const int N=1000;
int main()
{
    int p,q;
    int id[N];
    int height[N];
    int i,j;

    int counter=0;
    for(i=0;i<N;i++)
    {
        id[i]=i;
        height[i]=1;
    }

    while(std::cin >> p >> q)
    {
        if(p==-1 || q == -1)
        {
            break;
        }
        counter=0;
        for(i=id[p];i!=id[i];i=id[i]) { counter++;}
        for(j=id[q];j!=id[j];j=id[j]) { counter++;}

        if(height[j]>=height[i])
        {
            id[i]=id[j];
            height[j]+=height[i];
            counter+=2;
        }
        else
        {
            id[j]=id[i];
            height[i]+=height[j];
            counter+=2;
        }

        for(i=0;i<8;i++)
        {
            std::cout << id[i] << " ";
        }
        std::cout << '\t' << counter << std::endl << std::endl;
    }

    double average=0;
    int tall=0;
    for(i=0;i<8;i++)
    {
        tall=1;
        for(j=i;j!=id[j];j=id[j])
        {
            tall++;
        }
        average+=tall;
    }
    std::cout << "Total height is " << average << std::endl;
    average/=8.0;

    std::cout << "Average height is: " << average << std::endl;
}

---------------------------------------------------------------------------------------------------

	0 1
	1 1 2 3 4 5 6 7		2

	2 3
	1 1 3 3 4 5 6 7		2

	4 5
	1 1 3 3 5 5 6 7		2

	6 7
	1 1 3 3 5 5 7 7		2

	0 2
	1 3 3 3 5 5 7 7		2

	4 6
	1 3 3 3 5 7 7 7		2

	-1 -1
	Total height is 16
	Average height is: 2
