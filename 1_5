1_5

	Do the exercise 1.4, but use the quick-union algorithm (Program 1_2)


---------------------------------------------------------------------------------------------------
	Code: 


#include <iostream>
static const int N = 1000;
int main()
{
    int p,q;
    int id[N];
    int i=0;
    int j=0;
    int counter=0;
    for(i=0;i<N;i++)
    {
        id[i]=i;
    }
    /**
    0 1 2 3 4 5 6
    0 2 3 4 5 6 6
    **/

    while(std::cin >> p >> q)
    {
        counter=0;
        for(i=p;i!=id[i];i=id[i])
            counter++;
        for(j=q;j!=id[j];j=id[j])
            counter++;

        id[i]=id[j];
        counter+=2;
        for(i=0;i<7;i++)
        {
            std::cout << id[i] << " ";
        }

        std::cout << '\t' << counter << std::endl << std::endl;
    }
}



---------------------------------------------------------------------------------------------------

	0 2
	2 1 2 3 4 5 6	2

	1 4
	2 4 2 3 4 5 6	2

	2 5
	2 4 5 3 4 5 6	2

	3 6
	2 4 5 6 4 5 6	2

	0 4
	2 4 5 6 4 4 6	4

	6 0
	2 4 5 6 4 4 4	5

	1 3
	2 4 5 6 4 4 4	5

	

